name: Integration Tests

on:
  workflow_dispatch:  # Manual trigger only due to RDP dependencies

jobs:
  integration-test:
    name: RDP Integration Tests
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PowerShell
        uses: actions/setup-powershell@v1
        with:
          powershell-version: '7.2'
      
      - name: Install Test Dependencies
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -Force
          Install-Module -Name PSScriptAnalyzer -Force
      
      - name: Prepare Test Environment
        shell: pwsh
        run: |
          # Create test directory
          $testDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "TestEnv"
          New-Item -Path $testDir -ItemType Directory -Force | Out-Null
          
          # Import module for test preparation
          $moduleRootPath = $env:GITHUB_WORKSPACE
          $env:PSModulePath = "$moduleRootPath;$env:PSModulePath"
          
          Write-Output "Preparing test environment"
          
          # Setup mock environment - in a real environment this would configure actual servers
          # For CI, we'll use mocked calls that simulate RDP environment
          
          # Create mock functions for RDP commands
          @"
          function global:query {
            param([string]$Command, [string]$Server)
            
            return @"
          "SESSIONNAME       ID  STATE   TYPE        DEVICE
           console             1  Active  wdcon
           rdp-tcp#55          2  Active  rdpwd
           rdp-tcp#14          3  Disc    rdpwd
          "@
          }
          
          function global:logoff {
            param([string]$SessionID, [string]$Server)
            
            return "Session $SessionID logged off."
          }
          
          # Mock registry functions
          function global:Get-ItemProperty {
            param(
              [Parameter(Mandatory)]
              [string]$Path,
              [string]$Name,
              [string]$ErrorAction
            )
            
            if ($Path -like "*Terminal Server*" -and $Name -eq "fDenyTSConnections") {
              return [PSCustomObject]@{
                fDenyTSConnections = 0  # Simulate RDP enabled
              }
            }
            
            return $null
          }
          
          function global:Test-Connection {
            param(
              [Parameter(Mandatory)]
              [string]$ComputerName,
              [int]$Count,
              [switch]$Quiet
            )
            
            # Simulate server availability
            $availableServers = @("localhost", "server1", "server2")
            return $availableServers -contains $ComputerName
          }
          
          # Additional mock functions could be added as needed
          "@  | Out-File -FilePath (Join-Path -Path $testDir -ChildPath "MockFunctions.ps1") -Encoding utf8
          
          Write-Output "Mock environment prepared for testing"
      
      - name: Run Session Management Tests
        shell: pwsh
        run: |
          # Source mock functions
          $testDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "TestEnv"
          . (Join-Path -Path $testDir -ChildPath "MockFunctions.ps1")
          
          # Import module
          $moduleRootPath = $env:GITHUB_WORKSPACE
          $env:PSModulePath = "$moduleRootPath;$env:PSModulePath"
          
          # Load module files individually without importing (since we can't run as admin in Actions)
          . (Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "RDPSessionManagement.ps1")
          
          Write-Output "Testing Get-RDPSessions function"
          try {
            # Override function to use mock
            function Get-RDPSessions {
              param([string[]]$Servers = @("localhost"))
              # Use mock query function
              foreach ($server in $Servers) {
                $result = query -Command "session" -Server $server
                return $result
              }
            }
            
            $sessions = Get-RDPSessions -Servers "server1"
            if ($sessions -match "rdp-tcp") {
              Write-Output "  Success: Get-RDPSessions returned expected results"
            } else {
              throw "  Failed: Get-RDPSessions did not return expected results"
            }
          } catch {
            Write-Warning "  Test failed: $_"
          }
          
          Write-Output "Session Management tests completed"
      
      - name: Run Access Control Tests
        shell: pwsh
        run: |
          # Source mock functions
          $testDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "TestEnv"
          . (Join-Path -Path $testDir -ChildPath "MockFunctions.ps1")
          
          Write-Output "Testing RDP access functionality"
          try {
            # Mock Test-RDPAccess functionality
            function Test-RDPAccess {
              param([string[]]$Servers = @("localhost"))
              
              foreach ($server in $Servers) {
                if (Test-Connection -ComputerName $server -Count 1 -Quiet) {
                  $rdpSettings = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections"
                  $rdpEnabled = ($rdpSettings.fDenyTSConnections -eq 0)
                  
                  return [PSCustomObject]@{
                    Server = $server
                    Reachable = $true
                    RDPEnabled = $rdpEnabled
                    Status = if ($rdpEnabled) { "Enabled" } else { "Disabled" }
                  }
                } else {
                  return [PSCustomObject]@{
                    Server = $server
                    Reachable = $false
                    RDPEnabled = $false
                    Status = "Unreachable"
                  }
                }
              }
            }
            
            $accessResults = Test-RDPAccess -Servers @("server1", "nonexistent-server")
            
            if (($accessResults | Where-Object { $_.Server -eq "server1" -and $_.Reachable -eq $true }).Count -gt 0) {
              Write-Output "  Success: Test-RDPAccess correctly identified reachable server"
            } else {
              throw "  Failed: Test-RDPAccess did not correctly identify reachable server"
            }
            
            if (($accessResults | Where-Object { $_.Server -eq "nonexistent-server" -and $_.Reachable -eq $false }).Count -gt 0) {
              Write-Output "  Success: Test-RDPAccess correctly identified unreachable server"
            } else {
              throw "  Failed: Test-RDPAccess did not correctly identify unreachable server"
            }
          } catch {
            Write-Warning "  Test failed: $_"
          }
          
          Write-Output "Access Control tests completed"
      
      - name: Run Multi-Server Tests
        shell: pwsh
        run: |
          # Source mock functions
          $testDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "TestEnv"
          . (Join-Path -Path $testDir -ChildPath "MockFunctions.ps1")
          
          Write-Output "Testing multi-server operations"
          try {
            $servers = @("localhost", "server1", "server2", "nonexistent-server")
            $reachableCount = 0
            
            foreach ($server in $servers) {
              if (Test-Connection -ComputerName $server -Count 1 -Quiet) {
                $reachableCount++
              }
            }
            
            if ($reachableCount -eq 3) {
              Write-Output "  Success: Multi-server test correctly identified 3 reachable servers"
            } else {
              throw "  Failed: Multi-server test found $reachableCount reachable servers, expected 3"
            }
          } catch {
            Write-Warning "  Test failed: $_"
          }
          
          Write-Output "Multi-server tests completed"
      
      - name: Test Summary
        shell: pwsh
        run: |
          Write-Output "All integration tests completed. In a real environment, these would execute against actual servers."
          Write-Output "For full testing, the module should be tested in an environment with RDP configured."
