name: Documentation Check

on:
  push:
    branches: [ main ]
    paths:
      - '**.ps1'
      - '**.psd1'
      - '**.md'
  pull_request:
    branches: [ main ]
    paths:
      - '**.ps1'
      - '**.psd1'
      - '**.md'
  workflow_dispatch:

jobs:
  doc-check:
    name: Documentation Validation
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PowerShell
        uses: actions/setup-powershell@v1
        with:
          powershell-version: '7.2'
      
      - name: Check Comment-Based Help
        shell: pwsh
        run: |
          $scriptFiles = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter "*.ps1" -Recurse
          $functionsWithoutHelp = @()
          $functionsWithIncompleteHelp = @()
          
          foreach ($file in $scriptFiles) {
            $fileContent = Get-Content -Path $file.FullName -Raw
            $ast = [System.Management.Automation.Language.Parser]::ParseInput($fileContent, [ref]$null, [ref]$null)
            $functions = $ast.FindAll({ $args[0] -is [System.Management.Automation.Language.FunctionDefinitionAst] }, $true)
            
            foreach ($function in $functions) {
              $functionName = $function.Name
              $help = $function.GetHelpContent()
              
              if ($null -eq $help -or [string]::IsNullOrWhiteSpace($help.Synopsis)) {
                $functionsWithoutHelp += "$($file.Name): $functionName"
                continue
              }
              
              # Check for essential help elements
              $missingElements = @()
              if ([string]::IsNullOrWhiteSpace($help.Description)) { $missingElements += "Description" }
              if ($help.Parameters.Count -lt $function.Parameters.Count) { $missingElements += "Parameter documentation" }
              if ($help.Examples.Count -eq 0) { $missingElements += "Examples" }
              
              if ($missingElements.Count -gt 0) {
                $functionsWithIncompleteHelp += "$($file.Name): $functionName (Missing: $($missingElements -join ', '))"
              }
            }
          }
          
          # Report findings
          if ($functionsWithoutHelp.Count -gt 0) {
            Write-Output "Functions without comment-based help:"
            $functionsWithoutHelp | ForEach-Object { Write-Output "  - $_" }
          }
          
          if ($functionsWithIncompleteHelp.Count -gt 0) {
            Write-Output "Functions with incomplete comment-based help:"
            $functionsWithIncompleteHelp | ForEach-Object { Write-Output "  - $_" }
          }
          
          if ($functionsWithoutHelp.Count -eq 0 -and $functionsWithIncompleteHelp.Count -eq 0) {
            Write-Output "All functions have complete comment-based help. Great job!"
          } else {
            # Comment out the following line if you don't want the pipeline to fail for missing documentation
            # exit 1
          }
      
      - name: Validate Markdown Links
        shell: pwsh
        run: |
          $markdownFiles = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter "*.md" -Recurse
          $brokenLinks = @()
          
          foreach ($file in $markdownFiles) {
            $content = Get-Content -Path $file.FullName -Raw
            $mdLinks = Select-String -InputObject $content -Pattern '\[.+?\]\(((?!mailto:|#).+?)\)' -AllMatches
            
            foreach ($link in $mdLinks.Matches) {
              $linkUrl = $link.Groups[1].Value
              
              # Check if it's a local file reference
              if (-not $linkUrl.StartsWith("http")) {
                $localPath = Join-Path -Path $file.Directory -ChildPath $linkUrl
                if (-not (Test-Path -Path $localPath)) {
                  $brokenLinks += "$($file.Name): $linkUrl (File not found)"
                }
              }
            }
          }
          
          if ($brokenLinks.Count -gt 0) {
            Write-Output "Broken links found in documentation:"
            $brokenLinks | ForEach-Object { Write-Output "  - $_" }
            # Comment out the following line if you don't want the pipeline to fail for broken links
            # exit 1
          } else {
            Write-Output "All documentation links are valid."
          }
      
      - name: Verify README Contains Usage Examples
        shell: pwsh
        run: |
          $readmePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "README.md"
          if (-not (Test-Path -Path $readmePath)) {
            Write-Warning "README.md not found."
            # exit 1
          }
          
          $readme = Get-Content -Path $readmePath -Raw
          
          # Check for essential sections
          $essentialSections = @(
            "## Features",
            "## Requirements",
            "## Installation",
            "## Usage"
          )
          
          $missingSections = @()
          foreach ($section in $essentialSections) {
            if ($readme -notmatch [regex]::Escape($section)) {
              $missingSections += $section
            }
          }
          
          if ($missingSections.Count -gt 0) {
            Write-Warning "README.md is missing essential sections:"
            $missingSections | ForEach-Object { Write-Output "  - $_" }
            # exit 1
          } else {
            Write-Output "README.md contains all essential sections."
          }
          
          # Check for code examples
          $codeBlocks = Select-String -InputObject $readme -Pattern '```powershell' -AllMatches
          if ($codeBlocks.Matches.Count -eq 0) {
            Write-Warning "README.md doesn't contain any PowerShell code examples."
            # exit 1
          } else {
            Write-Output "README.md contains $($codeBlocks.Matches.Count) PowerShell code examples."
          }

